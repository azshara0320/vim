*comment.txt*   Vim comment help document

文本注释                                    *note-text* *note-code-text*

本文档主要为注释插件做一个文档参考。如在 Vim 配置文件中更改默认命令定义习惯于
用户自己的键映射。及如何为相关的文件关联注释符号后支持所有文件的注释等等。

描述~
·   支持普通和可视模式的单行或多行注释与取消注释操作。
·   支持普通模式的单行操作并自动识别是单行注释还是取消范围注释。
·   支持所有不同语言的注释。
·   支持命令行窗口回显注释信息，并可设置操作消息。
·   支持同一操作在同一窗口的不同缓冲区可使用不同的注释格式。
·   支持方法(函数)摘要(@var,@param,@return等)的空注释。
·   对范围注释中的空白行转换为空行(在列块注释模式中)。
·   在可视操作后不影响前次的高亮区域。
·   在操作后不影响寄存器的原值。
·   恢复光标行及列位置，并正确的恢复可视行中的列位置。

Note 推荐 Vim 版本 >= 7.4

使用~
 1 安装与使用                               |note-install-usage|
 2 用户可设置的全局变量说明                 |note-global-variables|
 3 默认的注释命令                           |note-default-command|

附加说明~
 1 注释符号是如何定义的                     |note-symbol-define|
 2 使用哪一种注释模式                       |select-which-mode|
 3 单符号反转                               |singleReverse|
 4 双符号单行操作                           |doubleCheck|
 5 强硬注释                                 |toughNotes|
 6 空格的严格与不严格                       |notStrict|
 7 消息内容                                 |msgContent|
 8 随意设置符号                             |comfortable|
 9 对空白行的处理                           |blankLineHandle|
10 注释符号的解析                           |parseSymbol|
11 注释格式                                 |commentFormat|
12 缓冲区变量                               |note-bf-var|
13 最小空白宽度                             |minBlankWidth|
14 模式与操作                               |modeOperation|

==============================================================================
1 安装与使用                                *note-install-usage*

comment.vim 插件文件
comment.txt 帮助文档
help.vim    用于在帮助文档中对注释文本块和中文小标题的语法设置可以不用安装

安装是简单的，只需复制文件 "comment.vim" 和 "comment.txt" 到指定的目录即可。

在 Unix 中放到如下指定的目录: >
    ~/.vim/plugin/comment.vim
    ~/.vim/doc/comment.txt
    ~/.vim/after/syntax/help.vim

在 MS-Windows 中放到如下指定的目录: >
    ~\vimfiles\plugin\comment.vim
    ~\vimfiles\doc\comment.txt
    ~\vimfiles\after\syntax\help.vim

Note 请确定这些目录在 'runtimepath' 选项中。最后用 |:helptags| 命令产生一个本
地的 tags 文件即可。

安装后所有文件都使用 "//" 和 "/*,*/" 为注释符号。如果正在编辑一个 HTML 文件，
当使用注释时也会是 "//" 和 "/*,*/"。关联注释符号，见 |add_comment_symbol|。

自定义习惯于用户的按键                      *user-custom-key-map*

如果不习惯默认的按键命令 |note-default-command|，那么可以自定义。

    单符号开关      <Plug>CommentSingleToggle
    可视单符号开关  <Plug>CommentHighSingleToggle

    双符号开关      <Plug>CommentDoubleToggle
    可视双符号开关  <Plug>CommentHighDoubleToggle
    创建摘要注释    <Plug>CommentEmptyNote

如习惯使用 CTRL-E 为单符号开关，使用 CTRL-Y 为双符号开关，设置如下: >

    nmap <C-E> <Plug>CommentSingleToggle
    vmap <C-E> <Plug>CommentHighSingleToggle

    nmap <C-Y> <Plug>CommentDoubleToggle
    vmap <C-Y> <Plug>CommentHighDoubleToggle
    imap <C-Y> <Plug>CommentEmptyNote

Note 创建摘要注释的计数在按键之后。如 "i_ctrl5"，在插入模式下输入 <C-Y>5 后会
创建一个7行的注释。并且创建摘要注释的最大计数为 9，创建后共计 12行。摘要的定义
见，|method_synopsis|。


将单符号的2个映射使用相同的按键如上面的 CTRL-E。双符号的3个映射使用相同按键如
上面的 CTRL-Y。或者使用由 |mapleader| 定义的 <Leader> 键，默认为 \。 >

NOTE: 如果当前文件支持两种注释: 分别为单符号和双符号注释，那么会自动识别单符号
按键开关和双符号按键开关。如果当前文件只支持一种注释符号，那么单符号开关和双符
号开关按键是共享的。设置自定义按键后默认命令 |note-default-command| 失效。

配置样例参考                                *user-config-example*

把如下放入到 Vim 配置文件中: >

    if !exists("g:loaded_code_comment")
        " 局部模式
        let g:allow_first_column_mode = 'perl,sh'
        let g:allow_each_line_mode = 'css'
        let g:allow_semi_block_mode = 'python'

        " 列块模式
        let g:open_column_block_mode = 1

        " 文件关联注释符号
        let g:add_comment_symbol = [
            \ ['ft:html', '<!--Start,End-->'],
            \ ['ft:css', '/*,*/'],
            \ ['ft:javascript,c,app', '//', '/*,*/'],
            \ ['ft:php', '//', '/**,*/'],
            \ ['ft:sh', '#', ':<<EOF,EOF'],
            \ ['ft:python', '#', "''','''"],
            \ ['ft:vim', '"'],
            \ ['ft:perl', '#','=pod,=cut'],
            \ ['fn:php.ini', ';'],
            \ ['fn:httpd.conf', '#'],
            \ ['ext:tpl', '{*,*}'],
        \ ]

        " 自定义映射按
        nmap c/ <Plug>CommentSingleToggle
        vmap c/ <Plug>CommentHighSingleToggle
        nmap d/ <Plug>CommentDoubleToggle
        vmap d/ <Plug>CommentHighDoubleToggle
        imap d/ <Plug>CommentEmptyNote
    endif

Note 对于相同的双符号，如 python 不同的注释格式在操作时耗时不同。见双符号单行
操作 |doubleCheck|。

禁用插件见 |loaded_code_comment|。更多的设置见 |note-global-variables|。
使用哪一种注释模式，见 |select-which-mode|。

==============================================================================
2 用户可设置的全局变量说明                  *note-global-variables*

可以用这些全局变量来改变注释操作的行为，如没有特别说明，对于字符或字符串的值尽
量使用单引号来设置。对于数值 1 或 0 即可。

关联注释符号                                |add_comment_symbol|
注释符号与空格                              |close_strict_space|
列块模式                                    |open_column_block_mode|
第一列模式                                  |allow_first_column_mode|
每一行模式                                  |allow_each_line_mode|
半成品列块模式                              |allow_semi_block_mode|
单符号反转                                  |open_single_reverse|
方法摘要                                    |method_synopsis|
消息回显                                    |close_echo_message|
重置默认的符号                              |reset-default-symbol|
禁用插件                                    |loaded_code_comment|

Note 带有 TODO 关键字的小节是未完成的功能，它不工作。

Note 当修改这些变量的默认值后，如果出错 gui 版本会有直接的提示，而控制台版本的
Vim 要借助 |message-history| 来排错。

关联注释符号                                *add_comment_symbol*

如果您想注释支持所有的文件，那么该小节的内容非常重要。 >
    let g:add_comment_symbol = [relation_value]
    let g:add_comment_symbol = [[relation_value] ...]]
关于列表内容，见 |relation_value|。添加示例，见 |add-symbol-example|。

                                            *relation_value*
列表内容如下:
    [string `add_method`, string `single`, string `double`] ...

    `add_method`  添加方式有3种，如下:
                    使用文件类型的方式，见 |ftype|。
                    使用文件名的方式，见 |fname|。
                    使用文件后辍名的方式，见 |fextension|。
    `single`      单符号，如 '//'。单符号和双符号的顺序没有规定。
    `double`      双符号，如 '/*,*/'。分割符是必须的，默认使用逗号作为分割符。

                                            *ftype*
使用文件类型的方式~
                                            *getFileType*
关于文件的类型可以使用如下的命令获取: >
    :set filetype?
    :echo &filetype

以 "ft:" 开始后面跟文件的类型 'filetype'，如 php 文件类型为 php，注释符号为单
符号 '//' 和双符号 '/*,*/'。设置如下: >
    let g:add_comment_symbol = ['ft:php', '//', '/*,*/']

Note: 双符号用逗号分割像这样 '/*,*/'，并且逗号两边不能有空白，否则会把空白也当
做注释符号的一部分。

如果多个文件类型使用相同的注释符号，js 文件类型 javascript。那么设置如下: >
    let g:add_comment_symbol = ['ft:javascript,php', '//', '/*,*/']

除了上面提到的两个文件类型，假如用户也要编辑 html 文件。html 文件类型为 html，
注释符号为 '<!--,-->'，设置如下: >
    let g:add_comment_symbol = [
        \ ['ft:javascript,php', '//', '/*,*/'],
        \ ['ft:html', '<!--,-->']]
<
                                            *fname*
使用文件名的方式~

以 "fn:" 开始后面跟文件名，如 "php.ini"，注释符号分号 ";"，那么添加如下: >
    let g:add_comment_symbol = ['fn:php.ini', ';']
<其它同 |fname|。
                                            *fextension*
使用文件后辍名的方式~

以 "ext:" 开始后面跟后辍名，如 "sort.sh"，注释符号为 "#"，那么添加如下: >
    let g:add_comment_symbol = ['ext:sh', '#']
其它同 |fname|。
                                            *add-symbol-example*
添加样例~

文件类型                单符号            双符号
------------------------------------------------
    html                                <!-- -->
    css                                 /* */
    javascript          //              /* */
    php                 //              /* */
    vim                 "
    perl                #               =pod =cut
    python              #               ''' '''

文件名                  单符号            双符号
------------------------------------------------
    php.ini             ;
    httpd.conf          #

文件扩展名              单符号            双符号
------------------------------------------------
    tpl                                 {* *}

在 Vim 配置文件中设置如下: >
    let g:add_comment_symbol = [
        \ ['ft:html', '<!--,-->'],
        \ ['ft:css', '/*,*/'],
        \ ['ft:javascript,php', '//', '/*,*/'],
        \ ['ft:vim', '"'],
        \ ['ft:perl', '#', '=pod,=cut'],
        \ ['ft:python', '#', "''','''"],
        \ ['fn:php.ini', ';'],
        \ ['fn:httpd.conf', '#'],
        \ ['ext:tpl', '{*,*}']]

如上面的第 3 组 javascript、php 都使用了 "//" 和 "/*,*/"。如我想让 php 的首符
号为 "/**" 而尾符号为 "*/"，并且 javascript 继续使用 "/*,*/"，那么可以这样添加
，把第 3 组删除掉并分成如下的两组: >

    ['ft:javascript', '//', '/*,*/']
    ['ft:php', '//', '/**,*/']

然后用上面新建的两组即可: >
    let g:add_comment_symbol = [
        \ ['ft:html', '<!--,-->'],
        \ ['ft:css', '/*,*/'],
        \ ['ft:javascript', '//', '/*,*/'],
        \ ['ft:php', '//', '/**,*/'],
        \ ['ft:vim', '"'],
        \ ['ft:perl', '#', '=pod,=cut'],
        \ ['ft:python', '#', "''','''"],
        \ ['fn:php.ini', ';'],
        \ ['fn:httpd.conf', '#'],
        \ ['ext:tpl', '{*,*}']]

出于这样的目的是因为当使用列块模式后，可使 php 类型文件的注释更美观。当然，其
它支持双符号类型的文件都可以这样添加。这是一个非常灵活的设置可以自由添加。见
|comfortable|。

Note 根据注释符号的解析流程，由于默认的注释符号为 '//' 和 '/*,*/'，所以使用
'//' 或'/*,*/' 的文件关联不必添加。

Note: Perl 文件的块注释需要设置 |allow_first_column_mode|。

注释符号与空格                              *close_strict_space*

默认设置使用空格，如不使用设置如下: >
    let g:close_strict_space = 1

关于空格不严格的转变 |notStrict|。

列块模式                                    *open_column_block_mode*

列块注释模式默认是关闭的，如果使用设置如下: >
    let g:open_column_block_mode = 1

见列块的注释格式 |commentFormat|。及示例 |comfortable|。

NOTE: 列块模式是不受空格的影响，并且不支持反转功能。

                                            *d_line_prefix* *FA2*
如果启用了列块模式，那么有一个可以设置的变量，该变量仅用于双符号的列块操作中。
它可以设置除了首行和末行的其它行使用的前辍。默认的行前辍为 '* '。星号后有一个
空格: >
    let g:d_line_prefix = '* '

用如下的一个文本注释块来说明: =t
    1 /*
    2  - HTML
    3  - CSS
    4  - JavaScript
    5  */

上面文本块中的注释符号为 '/*,*/'，除了注释范围中的第 1 行和第 5 行的其它行前辍
为减号 '- '，这是因为设置了如下的变量: >
    let g:d_line_prefix = '- '

空格也可以使用十六进表示 "\x20"。如下: >
    let g:d_line_prefix = "-\x20"
Note 使用双引号。

如果您想清空前辍字符，使用如下: >
    let g:d_line_prefix = ""

Note 前辍字符只能以可见字符开始，否则有致命错误。

                                            *d_inline_indent_width*
TODO 用于设置内行缩进宽度
                                            *d_tailline_indent_width*
TODO 用于尾符号行缩进宽度

第一列模式                                  *allow_first_column_mode*

该设置用于兼容像 Perl 语言的多行注释准备的。类似那些只能将注释符号插入到行的第
1列并以该注释符号结尾的行的语言。

如 Perl 文件的类型在 Vim 中是 perl，那么设置如下: >
    let g:allow_first_column_mode = 'perl'

该值是以文件类型 'filetype' 为字符串，如果有多个类似的文件类型，那么以逗号分割
，并且逗号之间不能有空白字符，否则会把空白字符也会作为文件类型的一部分: >
    let g:allow_first_column_mode = 'filetype,filetype,...'

该值用匹配表示为: >
    '^\(\([^,]\+\),\?\)\+[^, ]$'

如何获取文件的类型，见 |getFileType|。
                                            *FA3*
Note 如果该值设置不匹配，会产生致命的错误。

每一行模式                                  *allow_each_line_mode*

该设置是为那些像习惯 CSS 文件的双符号注释作用于每一行的那些人准备的。如下: >
    let g:allow_each_line_mode = 'css'

该值的设置方式同 |allow_first_column_mode|。

半成品列块模式                              *allow_semi_block_mode*

对于规范的 python 多行注释这是一种选择。该模式在注释后将首和尾符号行独立。并使
用范围内最小空白宽度之后作为首和尾符号的插入位置。 >
    let g:allow_semi_block_mode = 'python'

该值的设置方式同 |allow_first_column_mode|。

该模式双符号的操作类似第一列模式，只不过双符号的插入位置是由最小空白宽度决定。

单符号反转                                  *open_single_reverse*

注释反转默认是关闭的，如果使用设置如下: >
    let g:open_single_reverse = 1

对反转的描述，见 |singleReverse|。

方法摘要                                    *method_synopsis*

在创建只有方法描述的空注释之前您需要使用添加关键字，如下: >
    let g:method_synopsis = ['@return']

或者添加多个描述关键字: >
    let g:method_synopsis = ['@see', '@param', '@return']

如下示例的一个文本块 =t
    1
    2   /**
    3    * 
    4    * @see
    5    * @param
    6    * @return
    7    */

Note 这是在插入模式下完成的注释，而插入的位置将忽略注释模式并从光标位置开始。

消息回显                                    *close_echo_message*

默认显示消息，如果关闭显示设置如下: >
    let g:close_echo_message = 1

关于对回显后消息内容的解释 |msgContent|。
                                            *custom_echo_message*
如果使用自定义的消息设置下面的变量: >
    let g:custom_echo_message = ['Cancle!', 'Done!']
<
    'Cancle!' 默认值，表示取消注释后的消息。
    'Done!'   默认值，表示注释后的消息。

重置默认的符号                              *reset-default-symbol*

重置默认的注释符号~
                                            *FA1*
缺省注释符号为 '//' 和 '/*,*/'，如果你想修改默认注释符号使用如下设置:

                                            *reset_default_single_symbol*
重置单符号: >
    let g:reset_default_single_symbol = '//'
<
                                            *reset_default_double_symbol*
重置双符号: 首符号和尾符号要用逗号分割; >
    let g:reset_default_double_symbol = '/*,*/'

Note 单符号用于设置单符号，双符号用于设置双符号，在双符号设置的变量中首符号和
尾符号中的分隔符 "," 是必须的，除非分隔符号被修改 |reset_default_delimiter|。

Note 如果分隔符号出现在单符号的设置中，或者在双符号的设置中找不到分隔符号，将
会有致命的错误。

重置默认的分隔符号~
                                            *reset_default_delimiter*
默认使用逗号分隔符: >
    let g:reset_default_delimiter = ','

该分隔符号用于双符号的首和尾符号的分隔及分隔多个文件的关联。多用于内部检测，在
用户设置的这些全局变量中也会用到。不建议修改，除非当前编辑的文件将逗号作为注释
符号。

Note 如果您要修改分隔符号，需要做的准备如下:
·   将 % 修改为分隔符: >
    let g:reset_default_delimiter = '%'

·   在添加的文件关联中也必须使用 % 作为分隔符: >
    let g:add_comment_symbol = [
        \ ['ft:html%smarty', '<!--%-->'],
        \ ['ft:javascript%php', '//', '/*%*/']]

·   注释消息会受到影响，但是消息是正确的，仅影响内容的分隔符号而已。如，原型:
        [// B 96`,`98] Done!
        [/*`,`*/ B 96`,`98] Done!
    修改分隔符号后
        [// B 96`%`98] Done!
        [/*`%`*/ B 96`%`98] Done!

禁用插件                                    *loaded_code_comment*

该变量默认不存在，当该变量被设置后禁用插件: >
    let g:loaded_code_comment = 1

==============================================================================
3 命令                                      *note-default-command*

                                            *leader-vcc*
{visual}<Leader>cc      开关高亮区域的单符号。

                                            *leader-cc*
N <Leader>cc            开关单符号或使用计数 N 对多行操作。是注释还是取消注释
                        取决于光标所在行是否存在注释符号。如单符号为 '//'，使
                        用计数 3 对下面的文本操作: =t
                                1 Line
                                2 // Line
                                3 Line
                                4 Line
=t
                        当光标在上面的行 1 时，执行 "3<Leader>cc" 后如下: =t
                                1 // Line
                                2 // // Line
                                3 // Line
                                4 Line
=t
                        Note: 第 2 行被强硬注释。如只想第 1 和第 3 行注释，然
                        后第 2 行为取消注释，见反转 |open_single_reverse|。
                        关于强硬注释 |toughNotes| 。

                                            *leader-vdd*
{visual}<Leader>dd      开关高亮区域的双符号。只有高亮区域的首行和末行同时存在
                        注释符号，才会取消注释，否则为注释操作。

                                            *leader-dd*
N <Leader>dd            开关双符号或使用计数 N 对多行操作。
                        注释符号 '/* */'，使用计数 3 对下面文本操作: =t
                                1 Line
                                2 Line
                                3 Line
                                4 Line
=t
                        当光标在上面的行 1 时，执行 "3<Leader>dd" 后如下: =t
                                1 /* Line
                                2 Line
                                3 Line */
                                4 Line 4
=t
                        当光标位置还在行 1 时，再次执行命令 "3<Leader>dd" 后会
                        取消注释。不过在取消注释的时候可以不使用计数 3，只要光
                        标的位置在注释的范围中就可以。关于双符号的单行的操作行
                        为 |doubleCheck|。
                                            *leader-ca*
<Leader>ca N            创建只有方法描述关键字的空注释。
                        Note 计数 N 在命令后使用，并且 N 最大为 9，最小为 0，
                        并且低于 3 的计数，都按照计数 3 处理。

                                            *:SToggle*
:[range]SToggle         开关单符号命令，|[range]| 代表一个行号范围。
                            `:SToggle`        表示对光标位置所在的当前行。
                            `:3SToggle`       表示对第 3 行进行操作。
                            `:1,3SToggle`     表示对第 1 至 第 3 行。
                            `:.,$SToggle`     表示当前行至文件最后一行。
                            `:'<,'>SToggle`   表示高亮区域

                                            *:DToggle*
:[range]DToggle         开关双符号命令。
                        和单符号的范围一样的，这里的命令 ":3DToggle" 中的3同样
                        表示对第3行执行操作，不过有时候容易混淆，如果第3行在注
                        释的范围中 那么命令 ":3DToggle" 就是一个取消范围的注释
                        操作，否则就是给第3行添加注释。

==============================================================================
1 注释符号是如何定义的                      *note-symbol-define*

单符号: 如在 PHP 或 JavaScript 中的 "//"，
        或 Shell 脚本和 Apache 的配置文件使用的 "#"，
        或 Vim 文件中的 '"'，类似这样的行注释符号为单符号。

双符号: 如在大多数文件中，如 PHP, JavaScript, CSS 文件等等使用 "/*,*/"，
        在 HTML 文件中是 "<!--,-->"，
        在 Perl 文件中是 "=pod,=cut"，类似这样的块注释符号称为双符号。

        在本文档中双符号又分为首符号 (如 /*) 和尾符号 (如 */)。

==============================================================================
2 使用哪一种注释模式                        *select-which-mode*

注释操作有5种模式

2个全局模式~

默认模式:   插件安装后就是该模式。注释格式比较宽松随意。
列块模式:   使用预定好的注释格式，比默认模式清晰。见 |open_column_block_mode|。

Note 不要被这么多模吓到。在上面两个全局模式任选其一即可，当全局模式无法达到想
要的效果时，可以看下面的伪模式。这些伪模式用于局部设置并不会影响全局模式。

3个伪模式(或者局部模式)~

第一列模式:     见 |allow_first_column_mode|。
每一行模式:     见 |allow_each_line_mode|。
半成品列块模式: 见 |allow_semi_block_mode|

简单介绍~

  模式      作用范围或模式  对空白行处理      注释格式          注释符号局限性
------------------------------------------------------------------------------
默认模式    对所有文件生效  |blankLineHandle|   |dDefaultFormat|    单或双符号

列块模式    对所有文件生效  见上              |colBlockFormat|    单或双符号

第一列模式  仅对该设置包含  忽略              |firstColFormat|    同上，但仅对双
            的文件生效                                          符号有作用

每一行模式  仅对该设置包含  忽略              |eachLineFormat|    同上
            的文件生效

半成品模式  仅对该设置包含  忽略              |smeiColFormat|     同上
            的文件生效

模式优先级~

每一行模式 > 第一列模式 > 半成品模式 > 列块模式 > 默认模式

Note 在每一行模式/第一列模式/半成品模式中它们的字符值中的文件类型不要重复出现
，可能无法达到预期的那样。

==============================================================================
3 单符号反转                                *singleReverse*

如单符号为 '//' 的一个文本块: =t
    1 Line
    2 // Line
    3 Line

当光标位置在上面的行 1 时，执行命令 "3<Leader>cc" 后如下: =t
    1 // Line
    2 Line
    3 // Line

第 1 和 3 行被注释，第 2 行取消注释。在多行操作中如果注释符号不统一将会是一个
反转的效果。并且反转只存在于默认模式的单符号操作中。|open_single_reverse|。

==============================================================================
4 双符号单行操作                            *doubleCheck*

首先会检查当前行是否在注释的范围中，如果不在才为当前行添加注释。如果当前行在注
释范围当中，那么就会变成一个取消范围的注释操作。

对于相同双符号的半成品列块格式，它的单行操作是耗时的，因为它不知道这个单行是取
消范围的开始行还是结束行，要遍历整个文件的所有行或只有一半的行来识别。对于可视
模式或带计数的操作是快速的。

如 python 的 "''','''"。或者在关联注释符号时使用这样的格式来提高注释速度: >
    ['ft:python', '#', "'''Start,End'''"]
当然这样的设置不是必须的，根据自己喜好为主。

==============================================================================
5 强硬注释                                  *toughNotes*

单符号的强硬注释~

在普通模式操作多行时，是取消注释操作还是注释操作是根据当前行是否存在注释符号。

在可视模式操作多行时，是取消注释操作还是注释操作是根据可视的首行是否存在注释符
号。

如注释符号为 "//"，下面是一个本文的行注释: =t
    1 Line
    2 // Line
    3 //Line
    4 Line

当光标在上面的行 1 时，执行命令 "v2j<Leader>cc" 后如下: =t
    1 // Line
    2 // // Line
    3 // //Line
    4 Line

上面的第 2 和 3 行属于强硬注释操作，除非启用了反转 |open_single_reverse|。

再看看取消注释的操作，如下的文本是一个行注释: =t
    1 // Line
    2 Line
    3 //Line
    4 Line

当光标在上面的行 1 时执行，命令 "v2j<Leader>cc" 后如下: =t
    1 Line
    2 Line
    3 Line
    4 Line

上面的第 1 和 3 行是一个取消的注释操作。第 2 行是不变的这是正常的。除非使启用
了反转 |open_single_reverse|。

双符号的强硬注释~

在多行操作时，在范围的首行和末行都存在双注释符号，这才是一个取消注释操作。反之
为注释操作。

如注释符号为 "/*,*/"，下面是一个本文的块注释: =t
    1 /* Line
    2 Line
    3 Line */

当光标在上面的的行 1 时，执行命令 "2<Leader>dd" 后如下: =t
    1 /* /*Line
    2 Line */
    3 Line */
=t
                                                *WA1*
双符号都是成对的出现的，如果有一个单个的匹配不到，并会产生一个警告错误。看示例
，如下是一个文本块注释: =t
    1 /* Line
    2 Line */
    3 line
    4 Line */
    5 line
    6 /* Line
    7 Line */

==============================================================================
6 空格的严格与不严格                        *notStrict*

在注释操作中空格的设置始终都是严格。只有当首或尾符号是独占一行时，永远都不使用
空格，无意义的空白。

在取消注释操作中，如果注释符号之后的空格数量是 0、1 或多个时对空格不严格，无论
空格是启用还是禁用的。
=t
Note: 对于块列模式操作不受空格设置的影响。

==============================================================================
7 消息内容                                  *msgContent*

[注释符号 注释模式 行号] 操作消息

[// D 1] Done!         表示默认模式使用 // 符号对第 1 行注释操作。
[// B 1,3] Cancle!     表示列块模式使用 // 符号对第 1 至 3 行取消注释操作。

    Default 默认模式
    Block   列块模式

    First   第一列模式
    Each    每一行模式
    Smei    半成品模式
    Resver  单符号反转

数字是操作的行号它是准确的，它并不统计有多少行被注释或有多少行是取消注释的。

无论反转功能是禁用还是启用的状态，在操作一个单符号不连续的行时，行号代表仅是操
作的行号，而不是取消多少行的注释。如下面的文本块，当光标在原型1 的行 1 时，执
行命令 "3<Leader>cc" 后，会变成结果1 所示的文本块。这样是没问题的，但是回显消
息中的行号还是 [1,3]。 1 和 3 分别代表了范围，并且是具有实际操作的首行和末行。
=t
        原型1
    1 // Line
    2 Line
    3 // Line

        结果1
    1 Line
    2 Line
    3 Line

如果下面文本块，当光标在原型2 的行1 时，执行命令 "3<Leader>cc" 后，会变成结果2
所示的文本块，这也是没问题的。但是，回显消息中的行号只有一个 [1]。因为实际操作
的首行和末行是同一行: =t

        原型2
    1 // Line
    2 Line
    3 Line

        结果2
    1 Line
    2 Line
    3 Line

==============================================================================
8 随意设置符号                              *comfortable*

如果注释的双符号为 '/*,*/’，那么用下面的一块 PHP 注释代码来说明: =t

    1<?php
    2    /**
    3     * if (is_null($path)) {
    4     *   $path = dirname(__FILE__) . self::DS .'CalendarCache';
    5     * } else {
    6     *   $path = rtrim($path, self::DS);
    7     * }
    8     */
    9

启用列块模式 >
    let g:open_column_block_mode = 1

使用文件类型的方式来关联注释符号: >
    let g:add_comment_symbol = ['ft:php', '//', '/**,*/']

如果 c 文件还想使用默认的 '/*,*/'，那么，再设置一组如下: >
    let g:add_comment_symbol = [
        \ ['ft:php', '//', '/**,*/'],
        \ ['ft:c', '//', '/*,*/']]

Note 默认前辍使用的 "* "，可通过变量 |d_line_prefix| 来设置前辍。

如果注释的双符号为 '<!--,-->'，那么用下面的一块注释标记来说明: =t

    11    <!--Start
    12     * <ul>
    13     * <li>HTML</li>
    14     * <li>CSS</li>
    15     * <li>Apache</li>
    16     * </ul>
    17     End-->

启用列块模式 >
    let g:open_column_block_mode = 1

关联注释符号 >
    let g:add_comment_symbol = ['ft:html', '<!--Start,End-->']

如果 xml 文件还想使用默认的 '<!--,-->’，那么，再设置一组如下: >
    let g:add_comment_symbol = [
        \ ['ft:html', '<!--Start,End-->'],
        \ ['ft:xml', '<!--,-->'],
        \ ['ft:php', '//','/**,*/'],
        \ ['ft:c', '//', '/*,*/']]

Note 如果讨厌这个前辍 "* "，可通过变量 |d_line_prefix| 来设置或清空它。

==============================================================================
9 对空白行的处理                            *blankLineHandle*

单符号在单行或多行的操作中，永远都不会对空行 /^$ 或空白行 /^\s\+$ 进行操作。

每一行模式双符号的多行操作也不会对空行或空白行操作。

双符号在单行操作中可对空行或空白行使用注释(除了每一行模式)。

在列块模式的双符号多行操作时对首和尾符号行之内的空行或空白行的处理方式取决于内
行前辍并且会将空白行变成空行。其它模式无此功能。

除了默认模式的其它模式时，当首或尾符号各独占一行 (只有首或尾符号和不可见字符)
时，在取消操作时会删除首或尾符号行并写入到 "_ 寄存器，以免影响寄存器中原值。

Note 每一行模式是例外，该模式的首或尾符号行不会独占。

==============================================================================
10 注释符号的解析                           *parseSymbol*

首先会检查 |add_comment_symbol| 变量，如果用户设置了该变量并且是正确的，那么使
用该变量中定义的相应的文件关联符号，如果当前文件的关联不存在该变量中，则使用缺
省的注释符号 '//' 和 '/*,*/'。

如果 |add_comment_symbol| 变量不存在，那么直接使用缺省的 '//' 和 '/*,*/'。

==============================================================================
11 注释格式                                 *commentFormat*

列块格式                                    |colBlockFormat|
默认格式                                    |dDefaultFormat|
第一列格式                                  |firstColFormat|
每一行格式                                  |eachLineFormat|
半成品列块格式                              |smeiColFormat|

列块格式                                    *colBlockFormat*

双符号注释格式的特点~
                                            *DE2*
首和尾符号行是自动创建的行，并且首符号行以首符号结尾，尾符号行以尾符号结尾。

首符号是从最小空白宽度之后插入的。如果最小空白宽度为 0，就从第一列插入首符号。
关于最小空白宽度，见 |min-blank-width|。
                                            *DE1*
尾符号是从最小空白宽度的基础上加 1 的列位置之后插入。
                                            *DE4*
除了首和尾符号行，其它行的插入位置也是从最小空白宽度加 1 的列位置之后插入的。
                                            *DE3*
除了首和尾符号这两行，其它行可以有前辍字符。默认的前辍字符为 "* "，可以通过变
量 |d_line_prefix| 来设置。

如下的两个文本块原型1 和原型2: =t
        原型1
    1....Line
    2........Line
    3............Line
    4........Line

        原型2
    1Line
    2........Line
    3............Line
    4........Line

首先在原形1 的 4 行中，最小空白宽度为 4 个空格，在原型2 中最小空白宽度为 0 个
空格。最小空白宽度决定了注释符号的插入位置。当注释符号为 '/*,*/' 时，分别在原
型1 和原型2 的第一行执行命令 "4<Leader>dd" 后如下: =t

        原型1 结果

    1..../*
    2.....*.Line
    3.....*.....Line
    4.....*.........Line
    5.....*.....Line
    6.....*/

        原型2 结果

    1/*
    2.*.Line
    3.*.........Line
    4.*.............Line
    5.*.........Line
    6.*/

还是以上面的原型1 和原型2 为例，这次清空行内前辍: >
    let g:d_line_prefix = ''

现在分别在原型1 和原型2 的第一行执行命令 "4<Leader>dd" 后如下: =t
        原型1 结果

    1..../*
    2.....Line
    3.........Line
    4.............Line
    5.........Line
    6.....*/

        原型2 结果

    1/*
    2.Line 2
    3.........Line
    4.............Line
    5.........Line
    6.*/

Note 上面首和尾符号行和其它内行的插入位置。这也是列块的格式，只不过没有前辍。

单符号注释格式的特点~

单符号从最小空白宽度之后插入的。如果最小空白宽度为 0，从第一列插入单符号。

默认格式                                    *dDefaultFormat*

双符号注释格式的特点~

当只有首或尾符号的行时，首和尾符号从操作范围中最小的空白位置之后插入的注释符号
的。否则首符号从第一个可见字符的位置插入，尾符号在最后一个可见的字符位置之后插
入，也就是换行符之前。

如下的两个文本块原型1 和原型2: =t
        原型1
    1....Line
    2........Line
    3............Line

        原型2
    1
    2....Line
    3........Line
    4

首先在原型1 的第1行执行命令 "3<Leader>dd" 后，见原型1 结果: =t
    1..../* Line
    2........Line
    3............Line */

当在原型2 的第1行执行 "3<Leader>dd" 后，如下: =t
    1..../*
    2....Line
    3........Line */
    4

当在原型2 的第2行执行 "3<Leader>dd" 后，如下: =t
    1
    2..../* Line
    3...........Line
    4....*/

当在原型2 的第1行执行 "4<Leader>dd" 后，如下: =t
    1..../*
    2....Line
    3........Line
    4....*/

单符号注释格式~

单符号只从第一个可见字符的位置插入单符号。

第一列格式                                  *firstColFormat*

首和尾符号行是自动创建的新行并只用于首和尾符号行，同时首符号行以首符号结尾，尾
符号行以尾符号结尾。它们的插入位置都时从行的第一列开始。 =t

如下的一个文本块: =t
        原型1
    4....line
    5....line

当在上面的行4执行命令 "2<Leader>dd" 后如下: =t
        结果1
    4=pod
    5....line
    6....line
    7=cut
=t
当在上面的原型1在行4执行命令 "<Leader>dd" 后如下: =t
    4=pod
    5....line
    6=cut
    7....line

半成品列块格式                              *smeiColFormat*

与第一列格式类似，只不过首和尾符号插入的位置是从最小空白宽度之后。

如下的一个文本块: =t
        原型1
    4....line
    5....line

当在上面的行4执行命令 "2<Leader>dd" 后如下: =t
        结果1
    4....=pod
    5....line
    6....line
    7....=cut
=t
当在上面的原型1在行4执行命令 "<Leader>dd" 后如下: =t
    4....=pod
    5....line
    6....=cut
    7....line

Note 这是按照 python 多行的注释要求定义的半成品列块格式，当然默认模式和列块模
式也是可以的(如果你不讨厌它)。

每一行格式                                  *eachLineFormat*

将首和尾符号作用于一行并且首和尾符号插入的位置相当于单符号的默认模式。

如下面是一个 CSS 文件内容: =t
    1/* Global */
    2foor {
    3    color:"#ccc";
    4    font-size:12px
    5}

在上面的行3执行命令 "2<Leader>dd" 后如下: =t
    1/* Global */
    2foor {
    3    /* color:"#ccc"; */
    4    /* font-size:12px; */
    5}

==============================================================================
12 缓冲区变量                               *note-bf-var*

这些缓冲区变量是在操作时被自动设置的，不要去更改它。

b:symbol        存储了当前缓冲使用的注释符号
b:singleSymbol  用于按键共享，当前缓冲仅支持一种单符号时，先执行双符号按键操作
                时该变量被激活，并存储了单符号。
b:doubleSymbol  用于按键共享，当前缓冲仅支持一种双符号进，先执行单符号按键操作
                时该变量被激活，并存储了双符号。

b:singleLen     单符号长度
b:dHeadLen      首双符号长度
b:dTailLen      尾双符号长度

==============================================================================
13 最小空白宽度                             *minBlankWidth*

在一个多行操作的范围中，每行缩进宽度中最少的距离就是最小空白宽度。 >
        strlen(matchstr(getline("."), '^\s*')

如果操作的多行都是空白行，那么取最大的缩进距离作为最小空白宽度。

==============================================================================
14 模式与操作                               *modeOperation*

所有注释模式双符号的单行注释与取消注释都使用默认模式，除了第一列模式和半成品列
块模式。

所有注释模式双符号的多行注释与取消注释都与原注释模式一样。

所有注释模式单符号的单行或多行注释与取消注释都与原注释模式一样。

Note 所有模式的取消操作都是兼容的，除了每一行模式。

==============================================================================
 vim:tw=78:ts=4:et:ft=help:norl:isk+=-:
